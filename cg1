#include<graphics.h>
#include<iostream>

using namespace std;

void FloodFill(int x, int y, int oldc, int newc)
{
    int current;

    current = getpixel(x, y);

    if (current == oldc)
    {
        putpixel(x, y, newc);
        delay(1);
        FloodFill(x + 1, y, oldc, newc);
        FloodFill(x - 1, y, oldc, newc);
        FloodFill(x, y + 1, oldc, newc);
        FloodFill(x, y - 1, oldc, newc);
    }
}

int main()
{
    int x, y, oldc = 0, x1, y1, x2, y2;
    int gDriver = DETECT, gmode;
    initgraph(&gDriver, &gmode, NULL);

    x1 = 100;
    y1 = 100;
    x2 = 300;
    y2 = 300;

    setcolor(1);
    line(x1, y1, x2, y1);
    setcolor(2);
    line(x2, y1, x2, y2);
    setcolor(3);
    line(x2, y2, x1, y2);
    setcolor(5);
    line(x1, y2, x1, y1);

    x = (x1 + x2) / 2;
    y = (y1 + y2) / 2;
    FloodFill(x, y, oldc, 4);

    getch();
    closegraph();
    return 0;
}


//Certainly! Here are the theory topics related to the provided code:

1. **Graphics.h Library:**
   - The `graphics.h` library is a graphics library in C and C++ that provides functions for drawing basic shapes, text, and images on the screen.
   - It is commonly used for simple graphics programming and is often associated with the Borland Turbo C compiler.

2. **Graphics Initialization:**
   - The `initgraph` function is used to initialize the graphics system with the specified graphics driver and mode.
   - In the provided code, `DETECT` is used as the graphics driver, which allows the system to automatically detect a suitable graphics driver.

3. **Drawing a Rectangle:**
   - The rectangle is drawn using the `line` function to create four lines forming a rectangular shape.
   - Different colors are set for each line using the `setcolor` function.

4. **Flood Fill Algorithm:**
   - The `FloodFill` function implements the flood fill algorithm, a technique for filling connected regions of the same color with a new color.
   - It recursively fills neighboring pixels until it encounters a boundary with a color different from the initial color.

5. **Pixel Manipulation:**
   - The `getpixel` function retrieves the color of a pixel at a specified coordinate.
   - The `putpixel` function sets the color of a pixel at a specified coordinate.

6. **Recursive Function:**
   - The flood fill algorithm is implemented as a recursive function. A recursive function is a function that calls itself.
   - In this case, the `FloodFill` function calls itself for neighboring pixels until the filling is complete.

7. **Delay Function:**
   - The `delay` function introduces a small delay (in milliseconds) to make the flood fill animation visible. It slows down the execution of the program.

8. **Graphics Cleanup:**
   - The `getch` function is used to wait for a key press before closing the graphics window.
   - The `closegraph` function is called to release the resources used by the graphics system.
The Scan-Line Fill Algorithm is a computer graphics algorithm used to fill the interior of a polygon with a specified color. The basic idea behind this algorithm is to scan the image or screen line by line, determining the intersections between scanlines and the edges of the polygon. Once the intersections are known, the algorithm fills the interior of the polygon between pairs of intersections.

Here are the basic steps of the Scan-Line Fill Algorithm:

Initialize an Edge Table (ET): The Edge Table is a data structure that stores information about the edges of the polygon. For each edge, it should store the Y-coordinate of the bottom vertex, the inverse slope (1/m), and the X-coordinate of the bottom vertex.

Initialize an Active Edge Table (AET): The Active Edge Table is initially empty and is used to store edges that intersect the current scanline.

Fill the Edge Table (ET): For each edge of the polygon, calculate the Y-coordinate of the bottom vertex, the inverse slope, and the X-coordinate of the bottom vertex. Sort the edges in the Edge Table based on their Y-coordinate.

Process each scanline: Start scanning the image or screen line by line from the bottom to the top of the polygon. For each scanline, update the Active Edge Table by adding edges from the Edge Table where the Y-coordinate matches the current scanline. Remove edges from the Active Edge Table where the Y-coordinate is equal to the Y-coordinate of the top vertex of the edge.

Fill the pixels between pairs of intersections: Sort the Active Edge Table based on the current X-coordinate of the edges. Pair the edges and fill the pixels between each pair of intersections on the current scanline.

Update X-coordinates in the Active Edge Table: For each edge in the Active Edge Table, update its X-coordinate based on the inverse slope.

Repeat the process for each scanline: Continue scanning and filling until you reach the top of the polygon.

These topics cover the key aspects of the provided code, from graphics initialization to rectangle drawing and the implementation of the flood fill algorithm//
